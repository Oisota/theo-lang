/*
 * Main Test File for Theo
 */

import (
	"std/common"
	"std/io" // standard library import
	"std/math" * // import everything into current namespace
	"std/crypto" foo // import alias
	"cinclude/stdio" // include a c lib
	"app/models" // top level app namespace
	"./util" // relative import
)

pub fun main(args List[string]) int {
	let x = 5 * 8
	let hello = "Hello, World!"
	let result = scope x {
		x + 10
	}
	io.print(hello)
	io.print("Hello Again!")

	let l1 = List[int]()
	let el = l1.at(0)

	let l2 = l1.map(fn(a int) { a * 2 })

	// need to figure out how to lex different literals, may not be needed for initial implementation (should be working)
	let u2 = 0xFF
	let u3 = 0b0101

	with(open('file.txt'), fn(foo) {
		// do stuff with foo here
		let data = foo.read()
		data.map(fn l => int(l) * 2)
			.sum()
	})

	0
}
fun loop_test() {
	let i = Mut[int]()
	let j = 23.32
	let k = 10_000

	i.set(i.get() + 1) // mutation should be noisy

	range(1, 100).each(fn (x) {
		print(x)
	})

	loop {
		case i > 40 {
			True => break,
			False => {} // not sure how to do nothing here
		}
		i.set(i.get() + 1) 
	}
}
// this is a comment
fun add(a int, b int) int { // looks a little cleaner without colons in function signature
	a+ b
}
fun fib(n int) int {
	case n {
		0 => 0
		1 => 1
		x => recur(x-1) + recur(x-2)
	}
}
/*
This is a multiline
comment
*/

struct Point {
	x float = 0
	y float = 0
}

let p1 = Point(x=5, y=6)
let p2 = Point(x=5, y=6)

fun distance(p1 Point, p2 Point) float {
	let a = math.abs(p1.x - p2.x)
	let b = math.abs(p1.y - p2.y)
	math.sqrt(math.pow(a, 2), math.pow(b, 2))
}

interface Shape {
	fun area(self Shape) int
}

struct Rect {
	p1 Point
	p2 Point
}

impl Shape for Rect {
	fun area(self Rect) float {
		let w = math.abs(self.p1.x - self.p2.x)
		let h = math.abs(self.p1.y - self.p2.y)
		h * w
	}
}

enum Bool { True False}

union Option[T] {
	Some(T),
	None
}

type Transform = Function[Option[T] -> Option[T]]
impl Option[T] {
	fun map(self Option[T], transform Transform) Option[T] {
		case self {
			Some(v) => Some(transform(v)),
			None => None
		}
	}
}

class Rect {
    p1 Point
    p2 Point
}
